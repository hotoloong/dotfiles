# colorscheme
[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = 'colorscheme tender'

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'tpope/vim-sensible'

[[plugins]]
repo = 'junegunn/seoul256.vim'

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTab='<C-t>'
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 35
let NERDTreeAutoDeleteBuffer = 1
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> td :<C-u>NERDTreeFind<CR>
" nnoremap <silent> <F3> :<C-u>NERDTreeToggle<CR>
" show hidden file
let NERDTreeShowHidden = 1
"nnoremap <silent><C-e> :NERDTreeFocusToggle<CR>

" 他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']

[[plugins]]
repo = 'ryanoasis/vim-devicons'
depends = ['nerdtree', 'nerdtree-git-plugin']

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
depends = ['nerdtree']
hook_add = '''
" デフォルトでツリーを表示させる
let g:nerdtree_tabs_open_on_console_startup=1
let g:nerdtree_tabs_autofind=1
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

# file finder
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
" denite.vim {{{
augroup denite_filter
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    inoremap <silent><buffer> <C-j> <Esc>
          \:call denite#move_to_parent()<CR>
          \:call cursor(line('.')+1,0)<CR>
          \:call denite#move_to_filter()<CR>A
    inoremap <silent><buffer> <C-k> <Esc>
          \:call denite#move_to_parent()<CR>
          \:call cursor(line('.')-1,0)<CR>
          \:call denite#move_to_filter()<CR>A
  endfunction

  " denite/insert モードのときは，C- で移動できるようにする
  " call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>', 'noremap')
  " call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>', 'noremap')
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
  " tabopen や vsplit のキーバインドを割り当て
  call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
  call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
  call denite#custom#map('normal', "v", '<denite:do_action:vsplit>')

augroup END

" use flating
let s:denite_win_width_percent = 0.8
let s:denite_win_height_percent = 0.7

let s:denite_default_options = {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ 'highlight_filter_background': 'DeniteFilter',
    \ 'prompt': '$ ',
    \ 'start_filter': v:true,
    \ }
let s:denite_option_array = []
for [key, value] in items(s:denite_default_options)
  call add(s:denite_option_array, '-'.key.'='.value)
endfor
call denite#custom#option('default', s:denite_default_options)

call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])

call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

" Ripgrep command on grep source
call denite#custom#var('grep', {
  \ 'command': ['rg'],
  \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
  \ 'recursive_opts': [],
  \ 'pattern_opt': ['--regexp'],
  \ 'separator': ['--'],
  \ 'final_opts': [],
  \ })

" grep
command! -nargs=? Dgrep call s:Dgrep(<f-args>)
function s:Dgrep(...)
  if a:0 > 0
    execute(':Denite -buffer-name=grep-buffer-denite grep -path='.a:1)
  else
    execute(':Denite -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').' grep')
  endif
endfunction
" show Denite grep results
command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').'')
" next Denite grep result
command! Dnext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately '.join(s:denite_option_array, ' ').'')
" previous Denite grep result
command! Dprev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately '.join(s:denite_option_array, ' ').'')

" The prefix key.
nnoremap  [denite] <Nop>
nmap , [denite]

" nnoremap [denite]  :<C-u>Denite -no-split<Space>
nnoremap <silent> [denite]b  :<C-u>Denite -split=floating buffer<CR>
nnoremap <silent> [denite]m  :<C-u>Denite<Space>file_mru<CR>
nnoremap <silent> [denite]r  :<C-u>Denite<Space>file/rec<CR>
nnoremap <silent> [denite]f  :<C-u>Denite<Space>file<CR>
nnoremap <silent> [denite]g  :<C-u>Dgrep<CR>
nnoremap <silent> [denite]rg :<C-u>DResume<CR>
nnoremap <silent> [denite]n  :<C-u>Dnext<CR>
nnoremap <silent> [denite]p  :<C-u>Dprev<CR>
nnoremap <silent> [denite]c  :<C-u>Denite command command_history<CR>
nnoremap <silent> [denite]j  :<C-u>Denite jump<CR>
" }}}
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = ['denite']

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
depends = ['vim-precious']


[[plugins]]
repo = 'tomtom/tcomment_vim'

# LSP
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
set completeopt=menuone,noselect,preview,noinsert
inoremap <expr><Tab>  pumvisible() ? "\<C-y>" : "\<Tab>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_popup_delay = 20
'''
hook_post_source = '''
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({
\ 'priority': 10
\ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['asyncomplete']

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_diagnostics_enabled = 0
let g:lsp_diagnostics_echo_cursor = 0
let g:lsp_text_edit_enabled = 0

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> <f2> <plug>(lsp-rename)
  " refer to doc to add more commands
endfunction

augroup lsp_install
  au!
  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

# Fuzzy Finder
[[plugins]]
repo = 'mattn/vim-fz'

# ctags
[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <silent><F4> :<C-u>TagbarToggle<CR>
let g:tagbar_autofocus = 1

let g:tagbar_type_ruby = {
  \ 'kinds' : [
    \ 'm:modules',
    \ 'c:classes',
    \ 'd:describes',
    \ 'C:contexts',
    \ 'f:methods',
    \ 'F:singleton methods'
  \ ]
\ }
'''

[[plugins]]
repo = 'pechorin/any-jump.vim'

# シンタックスチェック
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
autocmd BufRead,BufNewFile *.slim setfiletype slim
let g:ale_linters = {
  \   'ruby': ['rubocop', 'reek', 'ruby', 'brakeman'],
  \   'slim': ['slimlint'],
  \   'markdown': ['textlint', 'markdownlint'],
  \   'text': ['textlint'],
  \}
let g:ale_completion_enabled = 1
let g:ale_ruby_rubocop_options = '--rails -c ./.rubocop.yml'
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
'''

[[plugins]]
repo = 'delphinus/lightline-delphinus'
depends = ['lightline']


[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['ale']
hook_add = '''
function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:h') . '/' . expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! LightlineMode()
  return  &ft == 'denite' ? 'Denite' :
    \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
  \ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" },
  \'active': {
  \  'left': [
  \    ['mode', 'paste'],
  \    ['readonly', 'filename', 'modified', 'ale'],
  \  ]
  \},
  \'component_function': {
  \  'filename': 'LightlineFilename',
  \  'ale': 'ALEGetStatusLine'
  \}
\ }
'''

# Git
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
autocmd BufWritePost *
      \ if exists('b:git_dir') && executable(b:git_dir.'/hooks/create_tags') |
      \   call system('"'.b:git_dir.'/hooks/create_ctags" &') |
      \ endif
'''

[[plugins]]
repo = 'gregsexton/gitv'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
" default ]c [c
nmap gn <Plug>(GitGutterNextHunk)
nmap gp <Plug>(GitGutterPrevHunk)
nmap <silent>,gr :<C-u>GitGutterUndoHunk<CR>
'''

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'

[[plugins]]
repo = 'rbgrouleff/bclose.vim'

[[plugins]]

# fzf preview

# [[plugins]]
# repo = 'junegunn/fzf', { 'do': { -> fzf#install() } }
#
# [[plugins]]
# repo = 'yuki-ycino/fzf-preview.vim'


# line number

[[plugins]]
repo = 'jeffkreeftmeijer/vim-numbertoggle'

# operator and textobject oprator

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
call expand_region#custom_text_objects('ruby', {
  \ 'im' :0,
  \ 'am' :0,
  \ })
'''

# reference
[[plugins]]
repo = 'thinca/vim-ref'

# etc
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
nnoremap \r :write<CR>:QuickRun<CR>

let g:quickrun_config = {'_': {}}

if has('nvim')
  let g:quickrun_config._.runner = 'neovim_job'
elseif exists('*ch_close_in')
  let g:quickrun_config._.runner = 'job'
endif

let g:quickrun_config['ruby.rspec'] = {
  \   'command': 'rspec',
  \   'cmdopt': '-f p',
  \   'exec': 'bundle exec %c %o %s',
  \   'filetype': 'rspec-result'
  \ }
let g:quickrun_config['rspec.line'] = {
  \   'command': 'rspec',
  \   'exec': 'bundle exec %c %s:%a',
  \   'filetype': 'rspec-result'
  \ }
function! s:RSpecQuickrun()
  set filetype=ruby.rspec
  let b:quickrun_config = { 'type': 'rspec' }
  nnoremap <silent> \t :write<CR>:execute 'QuickRun rspec.line -args ' . line('.')<CR>
endfunction
autocmd BufWinEnter,BufNewFile *_spec.rb call <SID>RSpecQuickrun()
'''

[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'

[[plugins]]
repo = 'hotoolong/translate.nvim'
hook_add = '''
let g:translate_copy_result = 1
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
let g:UltiSnipsEditSplit="vertical"
call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
    \ 'name': 'ultisnips',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
    \ }))
'''
